{"version":3,"sources":["images/ts-quiz.jpg","components/QuestionCardStyles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","components/InputForm.tsx","components/InitialStyles.ts","components/ResultsList.tsx","components/InitialList.tsx","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","InputForm","addInput","useState","newInput","setNewInput","id","style","marginBottom","fontSize","type","onChange","e","target","marginRight","marginLeft","height","width","aria-describedby","placeholder","preventDefault","marginTop","ResultsList","input","Score","color","text","InitialList","inputs","inputInput","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","setInputs","startTrivia","EASY","newQuestions","length","undefined","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.115e94fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ts-quiz.b59ea9b9.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nmax-width: 1100px;\nbackgorund: #ebfeff;\nborder-radius: 10px;\nborder: 2px dolid #005a3;\npadding: 20px;\nbox-shadow: 0px 5px 10px rgba(0,0,0,0.25);\ntext-align: center;\n\np{\n    font-size: 1.8rem;\n}\n\n`;\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3 ease;\n\n:hover {\n    opacity: 0.8;\n    \n}\n\nbutton {\n    cursor: pointer;\n    user-select: none;\n    font-size: 1.3rem;\n    width: 300px;\n    height: 50px;\n    margin: 5px 0;\n    background: ${({correct, userClicked}) => \n    correct\n    ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n    : !correct && userClicked\n    ?'linear-gradient(90deg, #ff5656, #c16868)'\n    :'linear-gradient(90deg, #56ccff, #6eafb4)'};\nborder: 3px solid #fff;\nbox-shadow: 1px 2px 0px rgba(0,0,0,0.1);\nborder-radius: 10px;\ncolor: #fff;\ntext-shadow: opx 1px 0px rgba(0,0,0,0.25);\n}\n`","import {shuffleArray} from './utils'\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & {answers: string[]};\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard'\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    //will await fetch itself then await when we convert it to json\n    const data = await (await fetch(endpoint)).json()\n\n    return data.results.map((question: Question)=> (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    ))\n}","import React from 'react'\n\n//styles\nimport {Wrapper, ButtonWrapper} from './QuestionCardStyles'\n\n//types\nimport {AnswerObject} from '../App'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({question,answers,callback,userAnswer,questionNr,totalQuestions}) => (\n    <Wrapper>\n    <p className=\"number\">\n        Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{__html: question}} />\n    <div>\n    {answers.map((answer) =>(\n        <ButtonWrapper \n        key={answer}\n        correct={userAnswer?.correctAnswer === answer}\n        userClicked={userAnswer?.answer == answer}\n        >\n            {/* //setting disabled to a boolean here */}\n            <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                <span dangerouslySetInnerHTML={{__html: answer}} />\n            </button>\n        </ButtonWrapper>\n    ))}\n    </div>\n   </Wrapper>\n\n  \n\n)\n\nexport default QuestionCard","export const shuffleArray = (array: any[]) => \n[...array].sort(()=> Math.random() - 0.5)","import styled, {createGlobalStyle} from 'styled-components'\n//@ts-ignore\nimport BGImage from './images/ts-quiz.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%\n}\n\nbody {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n}\n\n* {\n    box-sizing: border-box;\n    font-family: 'Kumbh', sans-sarif;\n}\n`;\n\nexport const Wrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\njustfy-content: center;\nalign-items: center;\n\n>p {\n    color: #fff;\n}\n\n.score {\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n}\n\nh1{\nfont-family: Kumbh Inline;\nbackground-image: linear-gradient(180deg, #fff, #87f1ff);\nbackground-size: 100%;\nbackground-clip: text;\n-webkit-background-clip: text;\n-webkit-text-fill-color: transparent;\n-moz-background-clip: text;\n-mox-text-fill-color: transparent;\nfilter: drop-shadow(2px 2px #0085a3)\nfont-size: 100px;\nfont-weight: 400;\ntext-allign: center;\nmargin: 30px;\n}\n\n.start, .next, .submit-button {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #87f1ff);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px reba(0,0,0,0.25);\n    border-radius: 10px;\n    height: 100px;\n    margin: 20px 0;\n    padding: 0 40px;\n}\n\n.start{\n    width: 500px;\n    height: 100px;\n    font-size: 3rem;\n}\n.next{\n \n    width: 600px;\n    height: 100px;  \n}\n\n.leaderboard{\n    max-width: 1100px;\nbackgorund: #ebfeff;\nborder-radius: 10px;\nborder: 2px solid white;\npadding: 20px;\nbox-shadow: 0px 5px 10px rgba(0,0,0,0.25);\ntext-align: center;\n}\n`\n","import React, {useState, ChangeEvent, FormEvent} from 'react'\n\ninterface AddInputProps {\n    addInput: AddInput;\n}\n\nexport const InputForm: React.FC<AddInputProps> = ({addInput}) => {\n    const [newInput, setNewInput] = useState(\"\");\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewInput(e.target.value)\n  }\n\n  const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    addInput(newInput)\n  }\n    return(\n    <form className=\"form-inline\">\n            <div className=\"input-group\">\n              <label id=\"initial-input\" style={{marginBottom: '50px', fontSize: \"40px\"}}>Initials:</label>\n              <input type=\"text\" onChange={handleChange} value={newInput} id=\"inputInitials\" className=\"form-control\" style={{marginRight: '30px', marginLeft: '30px', height: \"50px\", width: \"200px\"}} aria-describedby=\"passwordHelpInline\" placeholder=\"AB\" />\n              <button type=\"submit\" onClick={handleSubmit} className=\"submit-button\" style={{height: \"75px\", width: \"100px\", marginTop: \"10px\",  fontSize: \"1rem\"}}>Submit</button>\n            </div>\n          </form>\n    )\n}","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nmax-width: 1100px;\nbackgorund: #ebfeff;\nborder-radius: 10px;\nborder: 2px dolid #005a3;\npadding: 20px;\nbox-shadow: 0px 5px 10px rgba(0,0,0,0.25);\ntext-align: center;\n\np{\n    font-size: 1.8rem;\n}\n\n`;\n","import React from 'react'\n\ninterface InputProps {\ninput: Input\nScore: number\n}\n\nexport const ResultsList: React.FC<InputProps> = ({input, Score})=> {\n    return (\n        <div className=\"leaderboard\" style={{}}>\n         {/* <h2 style={{color: \"White\"}}>Score:</h2> */}\n    <span style={{color: \"White\", fontSize: '30px', marginTop: '10px',}}><ul>{input.text}</ul><ul id=\"score-list\">{Score} </ul></span>\n         </div>\n    \n    )\n}","import React from 'react'\nimport {Wrapper} from './InitialStyles'\nimport {ResultsList} from './ResultsList'\n\ninterface InputProps {\n    inputs: Array<Input>\n    Score: number\n}\n\nexport const InitialList: React.FC<InputProps>= ({inputs, Score}) => {\n    return (\n       <Wrapper>\n        <ul>\n            <h2 style={{color: \"White\"}}>Score:</h2>\n            {inputs.map(input => {\n                return <ResultsList key={input.text} input={input} Score={Score} />\n            })}\n        </ul>\n        </Wrapper>\n    )\n}","import React, {useState, ChangeEvent, FormEvent} from 'react'\nimport QuestionCard from './components/QuestionCard'\nimport {fetchQuizQuestions} from './API'\n\n//types\nimport {QuestionState} from './API'\n\nimport {Difficulty} from './API'\n\n//styles\nimport {GlobalStyle} from './App.styles'\nimport {Wrapper} from './App.styles'\nimport { InputForm } from './components/InputForm'\n\nimport {InitialList} from './components/InitialList'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n  \n}\n\ntype Input = {\n  text: string\n}\n\ninterface InitialList {\n  input: Input;\n}\n\nconst inputInput: Array<Input> =\n  [{text: \"\"}]\n\n// type InputObject = {\n//   input: string;\n// }\nconst TOTAL_QUESTIONS = 10;\n\nconst App = ()=>{\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers]= useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true)\n  const [inputs, setInputs] = useState(inputInput)\n  // const [initialInput, setInitialInput] = useState(\"\");\n  const renderInput = () => {\n    const newInput = inputs.map(input => {\n      return {...input}\n    });\n    setInputs(newInput)\n  }\n\n  const addInput: AddInput = newInput => {\n    setInputs([...inputs, {text: newInput}])\n  }\n  // const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n  //   setInitialInput(e.target.value)\n  // }\n\n  // const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n  //   e.preventDefault()\n  // }\n\n  // const addInitials = newInput => {\n    \n  // }\n\n    const startTrivia = async ()=> {\n      setLoading(true);\n      setGameOver(false);\n\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n        \n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n     \n\n   }\n\n\n\n   const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver){\n      const answer = e.currentTarget.value;\n      //check answer afainst correct\n\n      const correct = questions[number].correct_answer === answer;\n      //add acore if answer is correct\n      if (correct) setScore(prev => prev +1)\n\n      //save answer in array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n   }\n\n   const nextQuestion = ()=> {\n     //move onto next q if not last q\n     const nextQuestion = number +1\n\n     if (nextQuestion === TOTAL_QUESTIONS){\n       setGameOver(true);\n\n     } else {\n       setNumber(nextQuestion)\n     }\n\n   }\n\nreturn(\n  <>\n  <GlobalStyle />\n  <Wrapper>\n    <div className='App'>\n        <h1>REACT Typescript Quiz</h1>\n        {gameOver || userAnswers.length == TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n        Start\n        </button>\n           \n        ): null}\n { userAnswers.length == TOTAL_QUESTIONS ? (\n   <InputForm  addInput={addInput} />\n\n    ): null}\n          {/* if not game over, show score, otherwise null */}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        \n        {/* if loading then display */}\n        {loading && <p>Loading Questions .... </p>}\n\n          {/* if game is not loading and is not over, display this */}\n        {!loading && !gameOver && (\n        <QuestionCard \n        questionNr={number +1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n         />\n         )}\n  {!gameOver && !loading && userAnswers.length === number +1 && number !== TOTAL_QUESTIONS -1 ? (\n        <button className='next' \n        onClick={nextQuestion}\n        >\n          Next Question\n        </button>\n         ): null }\n      {/* <ResultsList input={inputs[0]} Score={score}/> */}\n      <InitialList inputs={inputs} Score={score} />\n    </div>\n    </Wrapper>\n    </>\n)\n   \n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}